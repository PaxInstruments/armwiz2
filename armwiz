#!/bin/sh

# armwiz ARM project generator

#set -e


##### Constants

ARMWIZ_COMMAND="armwiz"
ARMWIZ_NAME_PROPER="ARMWiz"
ARMWIZ_VERSION=0.0.1
ARMWIZ_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASE_DIR=$ARMWIZ_DIR
MBED_DIR=$BASE_DIR/mbed/libraries/mbed
FREERTOS_DIR=$BASE_DIR/freertos/FreeRTOS


# Import target parameter function
# Contains the following variables
# MBED_LINKER_SCRIPT
source $ARMWIZ_DIR/armwiz.config

DEBUG=0

##### Functions

function targets () {
    # List all available targets
    grep " )" armwiz.config | tr -d " )" | tr -d "*"
}

function template () {
    # TODO implement template
    echo "TODO implement template"
}

function makeProjectDirectory () {
    # Make project directory tree
    # Take projectname as argument

    # Check if project directory is emtpy
    #echo "$1"
    STATUS=$(mkdir $1)
    if [[ "$STATUS" ]]; then
        echo "Project directory is not empty!"
        exit 1
    fi

    # Create directory structure
    mkdir -p $(pwd)/$1/bin
    touch $(pwd)/$1/bin/.gitkeep # A dummy file to keep directory structure in place
    mkdir -p $(pwd)/$1/inc
    echo 'Your application header files (*.h).' > $(pwd)/$1/inc/README
    mkdir -p $(pwd)/$1/lib
    echo 'Place third-party source code or libraries here.' > $(pwd)/$1/lib/README
    mkdir -p $(pwd)/$1/src
    echo 'Your application source files (*.c, *.cpp, *.s).' > $(pwd)/$1/src/README

  # TODO Implement remainder of function
}


function deployMbed () {

    MBED_TARGET_PREFIX="TARGET_"
    MBED_TOOLCHAIN_PREFIX="TOOLCHAIN_"
  	# Copy into the project mbed library with only the sources files for the target board.
  	# Takes projectname as an argument

  	# Copy the mbed library excluding code unrelated to target board
    rsync -ar \
        --include="$MBED_TARGET_MANUFACTURER" \
        --include="$MBED_TARGET_FAMILY" \
        --include="$MBED_TARGET_CMSIS" \
        --include="$MBED_TARGET_HAL" \
        --include="$MBED_TOOLCHAIN" \
        --exclude="$MBED_TARGET_PREFIX*" \
        --exclude="$MBED_TOOLCHAIN_PREFIX*" \
        $MBED_DIR \
        $(pwd)/$1/lib
    # rsync -a \
    #     --exclude="*" \
    #     --include="*STM*" \
    #     $MBED_DIR \
    #     $(pwd)/$1/lib
    
    # Copy the library except for any code specific to any target.
    #rsync -a $MBED_DIR \
    #    --exclude="$MBED_TARGET_PREFIX" \
    #    $(pwd)/$1/lib

    # Copy the code specific to the target board.
    #local target_origin="`find $MBED_DIR -type d -name "$MBED_TARGET_NAME_CMSIS" | head -1`"
    #cp -r $target_origin $(pwd)/$1/lib/mbed/

    # Copy the target board linker script
    if [[ "$MBED_TARGET_LINKER_SCRIPT" ]] ; then
		    cp `find $MBED_DIR | grep "$MBED_TARGET_LINKER_SCRIPT" | head -1` $(pwd)/$1/$MBED_LINKER_SCRIPT
 	fi

    #  find `find lib/mbed/targets -type d -name 'TARGET_DISCO_F407VG'`/.. -mindepth 1 -maxdepth 1 -type d -name 'TARGET_DISCO_F407VG'
}

function deployFreeRTOS () {
    # Copy FreeRTOS library into the project
    # Takes projectname as an argument
  
    #cp -RL $FREERTOS_DIR $(pwd)/$1/lib/freertos
    ## TODO Add --exclude to rsync to exclude copying unnecessary directories
    rsync -a $FREERTOS_DIR $(pwd)/$1/lib
}

function usage () {
  	# Print usage information to std
    echo "USAGE: $ARMWIZ_COMMAND [options]"
    echo "       $ARMWIZ_COMMAND [[[-p <projectname> ] [-i]] | [-h]]"
    echo ""
    echo "For more detailed usage information type"
    echo "       $ARMWIZ_COMMAND --help"
}

function setTargetParameters () {
  	# Sets the target parameters acording to --target <targetname>
  	# Takes targetname as input
  	#MBED_LINKER_SCRIPT="$1"
  	setTargetParametersFromList $1
}

function usage () {
  	# Print usage information to std
    echo "Usage: $ARMWIZ_COMMAND [options] -p <projectname>"
    echo ""
    echo "For more detailed usage information type"
    echo "       $ARMWIZ_COMMAND --help"
}

function help () {
  	# Print help information to std
  	echo "Overview: $ARMWIZ_NAME_PROPER ARM project generator"
  	echo ""
    echo "Usage: $ARMWIZ_COMMAND [options] -p <projectname>"
    echo ""
    echo "Options:"
    echo "  -p, --projectname Specify project name via -p <projectname>"
    echo "  -t, --target      Specify target microcontroller via -t <targetname>"
    echo "      --freertos    Include FreeRTOS libraries"
    echo "      --mbed        Include mbed libraries"
    echo "      --targets     List supported targets"
    echo "      --version     Print the version number"
    echo "  -h, --help        Print this message"
    echo ""
    echo "Examples:"
    echo "  Create an empty project."
    echo ""
    echo "  $ $ARMWIZ_COMMAND -p myProject"
    echo ""
    echo "  Create a basic project for the stm32f407vg microcontroller that toggles the"
    echo "  state of a single pin."
    echo ""
    echo "  $ $ARMWIZ_COMMAND -t stm32f407vg -p myProject"
    echo ""
    echo "  Create a project named myProject that uses the mbed abstraction libraries and"
    echo "  the FreeRTOS real time operating system:"
    echo ""
    echo "  $ $ARMWIZ_COMMAND --freertos --mbed -t stm32f407vg -p myProject"
    echo ""
    echo "$ARMWIZ_COMMAND version $ARMWIZ_VERSION"
}

function debug () {
  	printf "output project = $projectname"
  	printf "target = $targetname"
  	printf "MBED_LINKER_SCRIPT = $MBED_LINKER_SCRIPT" 
}
##### Main

while : ; do
    case $1 in
        -p | --projectname )
      		shift
      		# TODO throw error if the next argument is another command flag
          	projectname=$1
           	;;
        -t | --target )
      		shift
      		# TODO throw error if the next argument is another command flag
          	targetname=$1
           	;;
        --mbed )
        	mbed=1
           	;;
        --freertos )
			freertos=1
            ;;
        --targets )
      		targets
      		exit
           	;;
        -h | --help )
			help
            exit
            ;;
        --version )
			echo "$ARMWIZ_COMMAND version $ARMWIZ_VERSION"
            exit
            ;;
        * )
			usage
            exit 1
    esac
    shift
    [[ "$1" != "" ]] || break
done

if [[ $targetname ]] ; then
	printf "Setting parameters for $targetname... "
	setTargetParameters $targetname
	# TODO implement error checking here. Throw error if the target is not valid
		printf "OK\n"
fi
if [[ $projectname ]] ; then
	printf "Creating directory tree for $projectname... "
	$(makeProjectDirectory $projectname)
	printf "OK\n"
fi
if [[ $mbed ]] ; then
	printf "Copying library mbed... "
	$(deployMbed $projectname)
	printf "OK\n"
fi
if [[ $freertos ]] ; then
	printf "Copying library FreeRTOS... "
	$(deployFreeRTOS $projectname)
	printf "OK\n"
fi

# TODO This stuff goes in a function. Here for testing.
cp $BASE_DIR/template/main.cpp $(pwd)/$projectname/src/main.cpp
cp $BASE_DIR/template/Makefile $(pwd)/$projectname/Makefile


if [[ $DEBUG == 1 ]] ; then
	echo "$(debug)"
  	
fi
