#!/bin/sh

# armwiz ARM project generator

# TODO Add a function to pull in the desired submodules.
# TODO Check if required submodule is present.
# TODO Generate Makefile from template
# TODO Generate examples. Modify based on configuration for appropriate LEDs etc.

set -e
DEBUG=0

##### Constants

ARMWIZ_COMMAND="armwiz"
ARMWIZ_NAME_PROPER="armwiz"
ARMWIZ_VERSION=0.0.1
ARMWIZ_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASE_DIR=$ARMWIZ_DIR
MBED_DIR=$BASE_DIR/libraries/mbed/libraries/mbed
FREERTOS_DIR=$BASE_DIR/libraries/freertos/FreeRTOS
CHIBIOS_DIR=$BASE_DIR/libraries/ChibiOS/os

# Import target parameter function
source $ARMWIZ_DIR/armwiz.config

# Import Makefile generation
source $ARMWIZ_DIR/armwiz.make
source $ARMWIZ_DIR/armwiz.example

##### Functions

function targets () {
    # List all available in armwiz.conf
    # Takes no arguments
    grep " )" armwiz.config | tr -d " )" | tr -d "*"
}

function deployMakefile () {
	# Generate the Makefile
	# Takes <projectname> as argument
	echoMakefile > $(pwd)/$1/Makefile
}

function deployExample () {
	# Generate the Makefile
	# Takes <projectname> as argument
	echoExample > $(pwd)/$1/src/${projectname}.cpp
}

function template () {
	# Make template files
    # TODO implement template function to copy <projectname>.c and other files
    # into the project directory.
    # TODO Add a project file for each type of tempalte needed. No need to have only a
    # single <projectname>.cpp file. We can make one for FreeRTOS-mbed, one for ChibiOS, or whatever

    if [[ mbed ]] ; then
    	sleep 0
    fi
    if [[ freertos ]] ; then
    	sleep 0
    fi
    if [[ chibios ]] ; then
    	sleep 0
    fi
}

function makeProjectDirectory () {
    # Make project directory tree
    # Takes <projectname> as argument

    # Check if project directory is emtpy
    STATUS=$(mkdir $1)
    if [[ "$STATUS" ]]; then
        echo "Project directory is not empty!"
        exit 1
    fi

    # Create directory structure
    echo "This is $1 generated by ${ARMWIZ_NAME_PROPER} ${ARMWIZ_VERSION}." > $(pwd)/$1/README.txt
    mkdir -p $(pwd)/$1/bin
    touch $(pwd)/$1/bin/.gitkeep # A dummy file to keep directory structure in place
    mkdir -p $(pwd)/$1/inc
    echo 'Your application header files (*.h).' > $(pwd)/$1/inc/README.txt
    mkdir -p $(pwd)/$1/lib
    echo 'Place third-party source code or libraries here.' > $(pwd)/$1/lib/README.txt
    mkdir -p $(pwd)/$1/src
    echo 'Your application source files (*.c, *.cpp, *.s).' > $(pwd)/$1/src/README.txt
}

function deployMbed () {
	# Copy into the project the mbed libraries with supporting hardware files
	# Takes <projectname> as argument

    MBED_TARGET_PREFIX="TARGET_"
    MBED_TOOLCHAIN_PREFIX="TOOLCHAIN_"
  	# Copy into the project mbed library with only the sources files for the target board.
  	# Takes projectname as an argument

  	# Copy the mbed library excluding code unrelated to target board
    rsync -ar \
        --include="$MBED_TARGET_MANUFACTURER" \
        --include="$MBED_TARGET_FAMILY" \
        --include="$MBED_TARGET_CMSIS" \
        --include="$MBED_TARGET_HAL" \
        --include="$MBED_TOOLCHAIN" \
        --exclude="$MBED_TARGET_PREFIX*" \
        --exclude="$MBED_TOOLCHAIN_PREFIX*" \
        $MBED_DIR/ \
        $(pwd)/$1/lib/mbed
    
    # Copy the target board linker script
    if [[ $MBED_TARGET_LINKER_SCRIPT ]] ; then
		    cp `find $MBED_DIR | grep "$MBED_TARGET_LINKER_SCRIPT" | head -1` $(pwd)/$1/$MBED_TARGET_LINKER_SCRIPT
 	fi
}

function deployFreeRTOS () {
    # Copy into the project the FreeRTOS libraries
    # Takes <projectname> as an argument
  
    ## TODO Add --exclude to rsync to exclude copying unnecessary directories
    rsync -ar \
    	--exclude="Demo" \
    	--exclude="links_to_doc_pages_for_the_demo_projects.url" \
    $FREERTOS_DIR/ $(pwd)/$1/lib/FreeRTOS

    mkdir -p $(pwd)/$1/lib/FreeRTOS/config
    echo 'Your application header files (*.h).' > $(pwd)/$1/inc/README.txt

}

function deployChibiOS () {
    # Copy into the project the FreeRTOS libraries
    # Takes <projectname> as an argument
  
    ## TODO Add --exclude to rsync to exclude copying unnecessary directories
    rsync -ar \
    $CHIBIOS_DIR/ $(pwd)/$1/lib/ChibiOS
}

function usage () {
  	# Print usage information to std
  	# Takes no arguments
    echo "USAGE: $ARMWIZ_COMMAND [options]"
    echo "       $ARMWIZ_COMMAND [[[-p <projectname> ] [-i]] | [-h]]"
    echo ""
    echo "For more detailed usage information type"
    echo "       $ARMWIZ_COMMAND --help"
}

function setTargetParameters () {
  	# Sets the target parameters acording to --target <targetname>
  	# Takes <targetname> as input
  	setTargetParametersFromList $1
}

function usage () {
  	# Print usage information to standard output
  	# Takes no arguments
    echo "Usage: $ARMWIZ_COMMAND [options] -p <projectname>"
    echo ""
    echo "For more detailed usage information type"
    echo "       $ARMWIZ_COMMAND --help"
}

function help () {
  	# Print help information to standard output
  	# Takes no arguments
  	echo "Overview: $ARMWIZ_NAME_PROPER ARM project generator"
  	echo ""
    echo "Usage: $ARMWIZ_COMMAND [options] -p <projectname>"
    echo ""
    echo "Options:"
    echo "  -p, --projectname Specify project name via -p <projectname>"
    echo "  -t, --target      Specify target microcontroller via -t <targetname>"
    echo "      --chibios     Include ChibiOS libraries"
    echo "      --freertos    Include FreeRTOS libraries"
    echo "      --mbed        Include mbed libraries"
    echo "      --targets     List supported targets"
    echo "      --version     Print the version number"
    echo "  -h, --help        Print this message"
    echo ""
    echo "Examples:"
    echo "  Create an empty project."
    echo ""
    echo "  $ $ARMWIZ_COMMAND -p myProject"
    echo ""
    echo "  Create a basic project for the stm32f407vg microcontroller that toggles the"
    echo "  state of a single pin."
    echo ""
    echo "  $ $ARMWIZ_COMMAND -t stm32f407vg -p myProject"
    echo ""
    echo "  Create a project named myProject that uses the mbed abstraction libraries and"
    echo "  the FreeRTOS real time operating system:"
    echo ""
    echo "  $ $ARMWIZ_COMMAND --freertos --mbed -t stm32f407vg -p myProject"
    echo ""
    echo "$ARMWIZ_COMMAND version $ARMWIZ_VERSION"
}

function debug () {
	# 
  	printf "output project = $projectname"
  	printf "target = $targetname"
  	printf "MBED_LINKER_SCRIPT = $MBED_LINKER_SCRIPT" 
}
##### Main

while : ; do
    case $1 in
        -p | --projectname )
      		shift
      		# TODO throw error if the next argument is another command flag
          	projectname=$1
           	;;
        -t | --target )
      		shift
      		# TODO throw error if the next argument is another command flag
          	targetname=$1
           	;;
        --mbed )
        	mbed=1
           	;;
        --freertos )
			freertos=1
            ;;
        --chibios )
			chibios=1
            ;;
        --targets )
      		targets
      		exit
           	;;
        -h | --help )
			help
            exit
            ;;
        --version )
			echo "$ARMWIZ_COMMAND version $ARMWIZ_VERSION"
            exit
            ;;
        * )
			usage
            exit 1
    esac
    shift
    [[ "$1" != "" ]] || break
done

if [[ $targetname ]] ; then
    printf "Setting parameters for $targetname... "
	# TODO implement error checking here. Throw error if the target is not valid
    setTargetParameters $targetname
    if [[ $MBED_TARGET_MANUFACTURER ]] ; then
        printf "OK\n"
    else
        printf "BAD\n"
        printf "$targetname is not supported\n"
        printf "For a list of supported targest use \"$ARMWIZ_COMMAND --targets\"\n"
        exit 1
    fi
    if [[ ${DEBUG} == 1 ]] ; then
	    echo "MAN: $MBED_TARGET_MANUFACTURER"
	    echo "FAM: $MBED_TARGET_FAMILY"
	    echo "CMSIS: $MBED_TARGET_CMSIS"
	    echo "HAL: $MBED_TARGET_HAL"
	    echo "TOOL: $MBED_TOOLCHAIN"
	    echo "LINK: $MBED_TARGET_LINKER_SCRIPT"
	fi
fi
if [[ $projectname ]] ; then
	printf "Creating directory tree for $projectname... "
	$(makeProjectDirectory $projectname)
	printf "OK\n"
fi
if [[ $projectname ]] ; then
	printf "Creating template files for $projectname... "
	$(template $projectname)
	printf "OK\n"
fi
if [[ $mbed ]] ; then
	printf "Copying library mbed... "
	$(deployMbed $projectname)
	printf "OK\n"
fi
if [[ $freertos ]] ; then
	printf "Copying library FreeRTOS... "
	$(deployFreeRTOS $projectname)
	printf "OK\n"
fi
if [[ $chibios ]] ; then
	printf "Copying library ChibiOS... "
	$(deployChibiOS $projectname)
	printf "OK\n"
fi
printf "Creating Makefile... "
deployMakefile $projectname
printf "OK\n"

printf "Creating ${projectname}.cpp... "
deployExample $projectname
printf "OK\n"

if [[ $DEBUG == 1 ]] ; then
	echo "$(debug)"
  	
fi
