#!/bin/sh

# TODO make more conditional code output
#  - ChibiOS
#  - FreeRTOS
#  - Bare metal

function echoExample () {
	echo "/* Private define ------------------------------------------------------------*/"
	echo "/* Private macro -------------------------------------------------------------*/"
	echo "/* Private variables ---------------------------------------------------------*/"
	echo "/* Private function prototypes -----------------------------------------------*/"
	echo "/* Private functions ---------------------------------------------------------*/"
	echo ""
	echo "/**"
	echo "  * @brief  Main program"
	echo "  * @param  None"
	echo "  * @retval None"
	echo "  */"
	if [ $mbed ] ; then
		echo "#include \"mbed.h\""
	fi
	if [ $freertos ] ; then
		echo "#include \"FreeRTOS.h\""
		echo "#include \"task.h\""
		echo "#include \"timers.h\""
		echo "#include \"semphr.h\""
	fi
	if [ $freertos ] ; then
		echo "#define BLOCK_"
		echo ""
		echo "void ToggleLED_Timer(void*);"
		echo "void DetectButtonPress(void*);"
		echo "void ToggleLED_IPC(void*);"
		echo ""
		echo "xQueueHandle pbq;"
		echo ""
		echo "// MCU Pin names FreeRTOS.mbed/inc/targets/HAL/TARGET_STM/STM32F4XX/PinNames.h"
		echo "// MCU Pin-STM32F4Discovery Board mapping: http://www.st.com/st-web-ui/static/active/en/resource/technical/document/user_manual/DM00039084.pdf"
		echo "DigitalIn pb(PA_0); // STM32F4Discovery Board User Push Button"
		echo "DigitalOut myled1(PD_12); // STM32F4Discovery Board Green Led"
		echo "DigitalOut myled2(PD_14); // STM32F4Discovery Board Red Led"
		echo ""
		echo "int main(void)"
		echo "{"
		echo "  /* Create IPC variables */"
		echo "  pbq = xQueueCreate(10, sizeof(int));"
		echo "  if (pbq == 0) {"
		echo "    while(1); /* fatal error */"
		echo "  }"
		echo ""
		echo "  /* Create tasks */"
		echo "  xTaskCreate("
		echo "		  ToggleLED_Timer,                 /* Function pointer */"
		echo "		  \"Task1\",                          /* Task name - for debugging only*/"
		echo "		  configMINIMAL_STACK_SIZE,         /* Stack depth in words */"
		echo "		  (void*) NULL,                     /* Pointer to tasks arguments (parameter) */"
		echo "		  tskIDLE_PRIORITY + 2UL,           /* Task priority*/"
		echo "		  NULL                              /* Task handle */"
		echo "  );"
		echo "  "
		echo "  xTaskCreate("
		echo "		  DetectButtonPress,"
		echo "		  \"Task2\","
		echo "		  configMINIMAL_STACK_SIZE,"
		echo "		  (void*) NULL,"
		echo "		  tskIDLE_PRIORITY + 2UL,"
		echo "		  NULL);"
		echo ""
		echo "  xTaskCreate("
		echo "		  ToggleLED_IPC,"
		echo "		  \"Task3\","
		echo "		  configMINIMAL_STACK_SIZE,"
		echo "		  (void*) NULL,"
		echo "		  tskIDLE_PRIORITY + 2UL,"
		echo "		  NULL);"
		echo "  "
		echo "  /* Start the RTOS Scheduler */"
		echo "  vTaskStartScheduler();"
		echo "  "
		echo "  /* HALT */"
		echo "  while(1); "
		echo "}"
		echo ""
		echo "/**"
		echo " * TASK 1: Toggle LED via RTOS Timer"
		echo " */"
		echo "void ToggleLED_Timer(void *pvParameters){"
		echo "  "
		echo "  while (1) {"
		echo "    myled1 = myled1 ^ 1;"
		echo "    "
		echo "    /*"
		echo "    Delay for a period of time. vTaskDelay() places the task into"
		echo "    the Blocked state until the period has expired."
		echo "    The delay period is spacified in 'ticks'. We can convert"
		echo "    yhis in milisecond with the constant portTICK_RATE_MS."
		echo "    */"
		echo "    vTaskDelay(500 / portTICK_RATE_MS);"
		echo "  }"
		echo "}"
		echo ""
		echo "/**"
		echo " * TASK 2: Detect Button Press"
		echo " * 			And Signal Event via Inter-Process Communication (IPC)"
		echo " */"
		echo "void DetectButtonPress(void *pvParameters){"
		echo "  "
		echo "  int sig = 1;"
		echo ""
		echo "  while (1) {"
		echo ""
		echo "    /* Detect Button Press  */"
		echo "    vTaskDelay(10 / portTICK_RATE_MS); /* Wait press, probe every 10 ms */"
		echo "    if(pb == 1) {"
		echo "      vTaskDelay(10 / portTICK_RATE_MS); /* Debounce delay 10 ms */"
		echo "      while(pb == 1)"
		echo "        vTaskDelay(10 / portTICK_RATE_MS); /* Wait release, probe every 10 ms */"
		echo "      vTaskDelay(10 / portTICK_RATE_MS); /* Debounce Delay 10 ms */"
		echo ""
		echo "      /* Notify Task 3 */"
		echo "      xQueueSendToBack(pbq, &sig, 0); /* Send Message */"
		echo "    }"
		echo "  }  "
		echo "}"
		echo ""
		echo "/**"
		echo " * TASK 3: Toggle LED via Inter-Process Communication (IPC)"
		echo " *"
		echo " */"
		echo "void ToggleLED_IPC(void *pvParameters) {"
		echo "  "
		echo "  int sig;"
		echo "  portBASE_TYPE status;"
		echo "  "
		echo "  while (1) {"
		echo "    status = xQueueReceive(pbq, &sig, portMAX_DELAY); /* Receive Message */"
		echo "    												  /* portMAX_DELAY blocks task indefinitely if queue is empty */"
		echo "    if(status == pdTRUE) {"
		echo "      myled2 = myled2 ^ 1;"
		echo "    }"
		echo "  }"
		echo "}"
	else
		echo ""
		echo "DigitalOut myled(LED1);"
		echo ""
		echo "int main() {"
		echo "    while(1) {"
		echo "        myled = 1;"
		echo "        wait(0.2);"
		echo "        myled = 0;"
		echo "        wait(0.2);"
		echo "    }"
		echo "}"
	fi
	# Not sure what this code is for or if I need it.
	# echo ""
	# echo "/*"
	# echo " * Override C++ new/delete operators to reduce memory footprint"
	# echo " */"
	# echo "#ifdef CUSTOM_NEW"
	# echo ""
	# echo "void *operator new(size_t size) {"
	# echo "        return malloc(size);"
	# echo "}"
	# echo ""
	# echo "void *operator new[](size_t size) {"
	# echo "        return malloc(size);"
	# echo "}"
	# echo ""
	# echo "void operator delete(void *p) {"
	# echo "        free(p);"
	# echo "}"
	# echo ""
	# echo "void operator delete[](void *p) {"
	# echo "        free(p);"
	# echo "}"
	# echo ""
	# echo "#endif"
}
