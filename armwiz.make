#!/bin/sh

# TODO
# - Add linker script based on armwiz.conf
# - Add TOOLCHAIN_PATH as a variable. Add in front of toolchain commands

function echoMakefile () {
	# Header information
	echo "###"
	echo "# Purpose: to create a bare-metal project with mbed SDK."
	echo ""
	echo "## TODO Make variable for toolchain location. Prepend to the toolchain list below"
	echo ""
	# echo "# This Makefile is generated by $ARMWIZ_COMMAND $ARMWIZ_VERSION"
 	# echo ""
	echo "###"
	echo "# GNU ARM Embedded Toolchain"
	# TODO 
	echo "CC=arm-none-eabi-gcc"
	echo "CXX=arm-none-eabi-g++"
	echo "LD=arm-none-eabi-ld"
	echo "AR=arm-none-eabi-ar"
	echo "AS=arm-none-eabi-as"
	echo "CP=arm-none-eabi-objcopy"
	echo "OD=arm-none-eabi-objdump"
	echo "NM=arm-none-eabi-nm"
	echo "SIZE=arm-none-eabi-size"
	echo "A2L=arm-none-eabi-addr2line"
	echo ""
	echo "###"
	echo "# Directory Structure"
	echo "BINDIR=bin"
	echo "INCDIR=inc"
	echo "SRCDIR=src"
	echo "LIBDIR=lib"
	echo ""
	echo "###"
	echo "# Find source files"
	echo "# TODO Make the file extensions case insensitative"
	echo "ASOURCES=\$(shell find -L \$(SRCDIR) -name '*.s')"
	echo "ASOURCES+=\$(shell find -L \$(LIBDIR) -name '*.s')"
	echo "ASOURCES=\$(shell find -L \$(SRCDIR) -name '*.S')"
	echo "ASOURCES+=\$(shell find -L \$(LIBDIR) -name '*.S')"
	echo "CSOURCES=\$(shell find -L \$(SRCDIR) -name '*.c')"
	echo "CSOURCES+=\$(shell find -L \$(LIBDIR) -name '*.c')"
	echo "CXXSOURCES=\$(shell find -L \$(SRCDIR) -name '*.cpp')"
	echo "CXXSOURCES+=\$(shell find -L \$(LIBDIR) -name '*.cpp')"
	# echo ""
	echo "# Find header directories"
	echo "INC=\$(shell find -L \$(INCDIR) -name '*.h' -exec dirname {} \; | uniq)"
	echo "INC+=\$(shell find -L \$(LIBDIR) -name '*.h' -exec dirname {} \; | uniq)"
	echo "INCLUDES=\$(INC:%=-I%)"
	#echo ""
	echo "# Find libraries"
	echo "INCLUDES_LIBS="
	echo "LINK_LIBS="
	#echo ""
	echo "# Create object list"
	echo "OBJECTS=\$(ASOURCES:%.s=%.o)"
	echo "OBJECTS+=\$(CSOURCES:%.c=%.o)"
	echo "OBJECTS+=\$(CXXSOURCES:%.cpp=%.o)"
	#echo ""
	echo "# Define output files ELF & IHEX"
	echo "BINELF=outp.elf"
	echo "BINHEX=outp.hex"
	echo ""
	echo "###"
	echo "# MCU FLAGS"
	echo "MCFLAGS=-mcpu=cortex-m4 -mthumb -mlittle-endian \\"
	echo "-mfpu=fpv4-sp-d16 -mfloat-abi=hard -mthumb-interwork"
	echo "# COMPILE FLAGS"
	echo "DEFS=-DTARGET_STM32F407 -D__CORTEX_M4 -D__FPU_PRESENT -DWORDS_STACK_SIZE=200"
	echo "CFLAGS=-c \$(MCFLAGS) \$(DEFS) \$(INCLUDES) -std=c99"
	echo "CXXFLAGS=-c \$(MCFLAGS) \$(DEFS) \$(INCLUDES) -std=c++11"
	echo "CXXFLAGS+=-U__STRICT_ANSI__ # Undefine __STRICT_ANSI__ to compile Stream.cpp using c++11. This is a dirty hack!"
	echo "# LINKER FLAGS"
	echo "LDSCRIPT=STM32F407XG.ld"
	echo "LDFLAGS =-T \$(LDSCRIPT) \$(MCFLAGS) --specs=nosys.specs \$(INCLUDES_LIBS) \$(LINK_LIBS)"
	echo ""
	echo "###"
	echo "# Build Rules"
	echo ".PHONY: all release release-memopt debug clean"
	echo ""
	echo "all: release-memopt"
	echo ""
	echo "release-memopt-blame: CFLAGS+=-g"
	echo "release-memopt-blame: CXXFLAGS+=-g"
	echo "release-memopt-blame: LDFLAGS+=-g -Wl,-Map=\$(BINDIR)/output.map"
	echo "release-memopt-blame: release-memopt"
	echo "release-memopt-blame:"
	echo "	@echo \"Top 10 space consuming symbols from the object code ...\\\n\""
	echo "	\$(NM) -A -l -C -td --reverse-sort --size-sort \$(BINDIR)/\$(BINELF) | head -n10 | cat -n # Output legend: man nm"
	echo "	@echo \"\\\n... and corresponging source files to blame.\\\n\""
	echo "	\$(NM) --reverse-sort --size-sort -S -tx \$(BINDIR)/\$(BINELF) | head -10 | cut -d':' -f2 | cut -d' ' -f1 | \$(A2L) -e \$(BINDIR)/\$(BINELF) | cat -n # Output legend: man addr2line"
	echo ""
	echo "release-memopt: DEFS+=-DCUSTOM_NEW -DNO_EXCEPTIONS"
	echo "release-memopt: CFLAGS+=-Os -ffunction-sections -fdata-sections -fno-builtin # -flto"
	echo "release-memopt: CXXFLAGS+=-Os -fno-exceptions -ffunction-sections -fdata-sections -fno-builtin -fno-rtti # -flto"
	echo "release-memopt: LDFLAGS+=-Os -Wl,-gc-sections --specs=nano.specs # -flto"
	echo "release-memopt: release"
	echo ""
	echo "debug: CFLAGS+=-g"
	echo "debug: CXXFLAGS+=-g"
	echo "debug: LDFLAGS+=-g"
	echo "debug: release"
	echo ""
	echo "release: \$(BINDIR)/\$(BINHEX)"
	echo ""
	echo "\$(BINDIR)/\$(BINHEX): \$(BINDIR)/\$(BINELF)"
	echo "	\$(CP) -O ihex \$< \$@"
	echo "	@echo \"Objcopy from ELF to IHEX complete!\\\n\""
	echo ""
	echo "\$(BINDIR)/\$(BINELF): \$(OBJECTS)"
	echo "	\$(CXX) \$(OBJECTS) \$(LDFLAGS) -o \$@"
	echo "	@echo \"Linking complete!\\\n\""
	echo "	\$(SIZE) \$(BINDIR)/\$(BINELF)"
	echo ""
	echo "%.o: %.cpp"
	echo "	\$(CXX) \$(CXXFLAGS) \$< -o \$@"
	echo "	@echo \"Compiled \"\$<\"!\\\n\""
	echo ""
	echo "%.o: %.c"
	echo "	\$(CC) \$(CFLAGS) \$< -o \$@"
	echo "	@echo \"Compiled \"\$<\"!\\\n\""
	echo ""
	echo "%.o: %.s"
	echo "	\$(CC) \$(CFLAGS) \$< -o \$@"
	echo "	@echo \"Assambled \"\$<\"!\\\n\""
	echo ""
	echo "clean:"
	echo "	rm -f \$(OBJECTS) \$(BINDIR)/\$(BINELF) \$(BINDIR)/\$(BINHEX) \$(BINDIR)/output.map"
	echo ""
	echo "deploy:"
	echo "ifeq (\$(wildcard /opt/openocd/bin/openocd),)"
	echo "	openocd -f board/stm32f4discovery.cfg -c \"program bin/\"\$(BINELF)\" verify reset\""
	echo "else"
	echo "	/opt/openocd/bin/openocd -f /opt/openocd/share/openocd/scripts/board/stm32f4discovery.cfg -c \"program bin/\"\$(BINELF)\" verify reset\""
	echo "endif"
	echo ""
}
